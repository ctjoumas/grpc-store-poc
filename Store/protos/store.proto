syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.store";
option java_outer_classname = "StoreProto";
option objc_class_prefix = "RTG";

package store;

// Interface exported by the server.
service Store {
  // A simple RPC.
  //
  // Obtains the item for the specific beer.
  //
  // An item with an empty name is returned if there's no beer found.
  rpc GetItem(Beer) returns (Item) {}

  // A server-to-client streaming RPC.
  //
  // Obtains the store locations which carry a specific beer
  rpc ListStores(Beer) returns (stream StoreLocation) {}

  // A client-to-server streaming RPC.
  //
  // Accepts a stream of Beers and returns the total cost
  rpc GetTotalCost(stream Beer) returns (TotalCost) {}

  // A Bidirectional streaming RPC.
  //
  // Accepts a stream of Beers sent while prices are being looked up,
  // while receiving other Beers (e.g. from other users).
  rpc GetEachItemCost(stream Beer) returns (stream TotalCost) {}
}

// Beers are represented by the specific style and name.
message Beer {
  string style = 1;
  string name = 2;
  string brewery = 3;
}

// Item
message Item {
  // Item Number of the beer
  int32 itemNumber = 1;

  // The beer 
  Beer beer = 2;

  int32 cost = 3;

  repeated StoreLocation stores = 4;
}

// Total Cost
message TotalCost {
	int32 cost = 1;
}

// Store Location Name
message StoreLocation {
    string name = 1;
}

// A latitude-longitude rectangle, represented as two diagonally opposite
// points "lo" and "hi".
//message Rectangle {
  // One corner of the rectangle.
//  Point lo = 1;

  // The other corner of the rectangle.
//  Point hi = 2;
//}

// A feature names something at a given point.
//
// If a feature could not be named, the name is empty.
//message Feature {
  // The name of the feature.
//  string name = 1;

  // The point where the feature is detected.
//  Point location = 2;
//}

// A RouteNote is a message sent while at a given point.
//message RouteNote {
  // The location from which the message is sent.
//  Point location = 1;

  // The message to be sent.
//  string message = 2;
//}

// A RouteSummary is received in response to a RecordRoute rpc.
//
// It contains the number of individual points received, the number of
// detected features, and the total distance covered as the cumulative sum of
// the distance between each point.
//message RouteSummary {
  // The number of points received.
//  int32 point_count = 1;

  // The number of known features passed while traversing the route.
//  int32 feature_count = 2;

  // The distance covered in metres.
//  int32 distance = 3;

  // The duration of the traversal in seconds.
//  int32 elapsed_time = 4;
//}